/********************************** (C) COPYRIGHT *******************************
* File Name          : main.c
* Author             : WCH
* Version            : V1.0.0
* Date               : 2021/06/06
* Description        : Main program body.
* Copyright (c) 2021 Nanjing Qinheng Microelectronics Co., Ltd.
* SPDX-License-Identifier: Apache-2.0
*******************************************************************************/


#include "debug.h"
#include "system.h"
#include "apps/inc/Crsf.h"
#include "apps/inc/control.h"
#include "drivers/pwm.h"
#include "drivers/MPU6050.h"
#include "drivers/bsp_filter.h"
#include "FreeRTOS.h"
#include "task.h"

int last_RC_lock_state = Locked;	//上一次锁定状态
float Motor_speed_set = PWM_THROTTLE_MIN; //油门值设定

int i=0;

/* Global typedef */

/* Global define */

/* Global Variable */


/*For RTOS TEST*/
/* Global define */
#define TASK1_TASK_PRIO     5
#define TASK1_STK_SIZE      256
#define TASK2_TASK_PRIO     5
#define TASK2_STK_SIZE      256

/* Global Variable */
TaskHandle_t Task1Task_Handler;
TaskHandle_t Task2Task_Handler;

void test_task()
{
	printf("RTOS_OK, called_count:%d\n", i);
	i++;
	vTaskDelay(10);
}

/*********************************************************************
 * @fn      main
 *
 * @brief   Main program.
 *
 * @return  none
 */

void Motor_sort_start()		//电机缓启动
{
	if(is_locked == Unlocked && last_RC_lock_state == Locked){	//当解锁电机时候
		printf("MOTOR UNLOCKED!!!!\n");
		last_RC_lock_state = Unlocked;
		MOTOR_MODE = MOTOR_SOFT_STARTING;	//切换到缓启动模式

		for(int i=0; i<SOFT_START_TIME; i++){	//缓启动逻辑
			Motor_speed_set = ((((float)PWM_THROTTLE_MIN_ROTATE-(float)PWM_THROTTLE_MIN)/(float)SOFT_START_TIME))*i + PWM_THROTTLE_MIN;
			//printf("Motor_set=%d\n", (int)Motor_speed_set);
				Motor_ctr_SOFT_START(Motor_speed_set, 1);
				Motor_ctr_SOFT_START(Motor_speed_set, 2);
				Motor_ctr_SOFT_START(Motor_speed_set, 3);
				Motor_ctr_SOFT_START(Motor_speed_set, 4);
			Delay_Ms(1);
		}

		printf("MOTOR OK!!!!\n");
		MOTOR_MODE = MOTOR_NORMAL; //切换回正常模式
	}

	if(is_locked == Locked){
		last_RC_lock_state = Locked;
		MOTOR_MODE = MOTOR_NORMAL;
		Stop_motor();
	}


}

int main(void)
{
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
	SystemCoreClockUpdate();
	Delay_Init();
	USART_Printf_Init(115200);
	Crc_init(0xD5);
	printf("SystemClk:%d\r\n",SystemCoreClock);
	printf("This is printf example\r\n");


		/* RTOS_TEST */
    xTaskCreate((TaskFunction_t )test_task,
                        (const char*    )"task2",
                        (uint16_t       )TASK2_STK_SIZE,
                        (void*          )NULL,
                        (UBaseType_t    )TASK2_TASK_PRIO,
                        (TaskHandle_t*  )&Task2Task_Handler);
    vTaskStartScheduler();

	System_Init();

	while(1)
    {
		printf("while(1)\n");
	    // System_Loop();
		// Motor_sort_start();
	}
}


